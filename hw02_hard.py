# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
#equation = 'y = -1x + 1' # проверка
x = 2.5
# вычислите и выведите y

to_x = equation.find('=')	# вычисляем начало среза
from_x = equation.find('x')	# вычисляем крнец среза

k = float(equation[(to_x + 2): from_x])	# получаем срез k. Если b float. То и k в теории может быть не только int но и float
b = float(equation[(from_x + 4):])		# получаем срез b. И преобразуем в число с плавающей запятой

y = k * x + b
print("Решение уравнения: ", y)
print('=========================================')
# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1985'

# Примеры некорректных дат
#date = '01.22.1001'
#date = '1.12.1001'
#date = '-2.10.3001'
#
#создаем кортежи и список месяцев и дней
bone_months = (2, 4, 6, 9, 11)			# месяцы с 31 днём
hollow_month = (1, 3, 5, 7, 8, 10, 12)	# месяцы с 30 днями
days = []				# генерируем список дней до 30 включительно
for i in range(1,31):	# после предварительного тестирования print(days) получаем список, который можно
	days.append(i)		# использовать (скопировать результат) вместо цилка в кортеже, так разгрузим машину и меньше памяти используем.
						# но не стал пока так делать.
#определяем точки среза
first_point = date.find('.')
second_point = date.find('.', first_point + 1)
# первая проверка: если точки на местах и длина строки сохранена
if first_point == 2 and second_point == 5 and len(date) == 10:
	# получение срезов строки.
	day = int(date[:2])
	month = int(date[3:5])
	year = int(date[6:])
	#вторая проверка: если введенные данные корректны. По заданию не требуется проверять на ввод "не цифр"
	if year >= 1 and year <= 9999: 	# проверка ввода года на отрицателные значения
		if (day in days) and (month in bone_months or month in hollow_month): # проверка всех месяцев и дней кроме 31. Февраль допускает 30 дней
			print('дата введена корректно')
		elif day == 31 and month in bone_months: # проверка, точно ли 
			print('дата введена корректно')
		else:
			print('ошибка ввода дня или месяца')
	else:
		print("ошибка ввода года")
else:
	print('не верный формат даты')

print('=========================================')
# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

room = int(input ('Вход: '))
m = 0 # конец активной матрицы
#n = 1 # конец предыдщей марицы/ позже убрать из кода
i = 1 # счетчик циклов
j = 0 # счетчик пробегающий по ширине матрицы
floor = 0 # этаж
# Ищем матрицу чисел куда попало введенное значение комнаты
while True:
	n = m 			# записываем значение матрицы в предыдущий показатель
	m = m + i**2	# высчитываем окончание текущей матрицы
	floor = floor + i 	# высчитываем текущий этаж
	if room > n and room <= m: 	# останаливаем цикл, если комната оказалась в текущей матрице
		break
	i += 1 			# инкремент матрицы. Оно же ширина матрицы или же кол-во строк в матрице
# перебираем строки матрицы (этажи) опираясь на верхний, т.е. спускаемся вниз
while j != i: 	# проход по строкам матрицы
	m -= i 		# конец предыдущей строки
	if room >= (m+1) and room <= (m+i): # если комната находится между началом и концом текущей строки включительно
		break							# найдена, останавливаем цикл перебора.
	j +=1 		# если нет, переходим на следующую строку
	floor -= 1 	# соответственно и следующий этаж
from_left = room - m 	# вычисляем какой по счету слева находится комната, опираясь на начало строки не включительно

print("Выход: ", floor, from_left)
import os  # Импортируем всю библиотеку.
# path mkdir  # тут указываю все используемые функции, чтобы потом оптимизировать
import shutil
# copy        # тут указываю все используемые функции, чтобы потом оптимизировать





# Задача-1:
# Напишите скрипт, создающий директории dir_1 - dir_9 в папке,
# из которой запущен данный скрипт.
# И второй скрипт, удаляющий эти папки.


def make_dirs():  # Функция создания директрорий dir_1 - dir_9
    for i in range(1, 10):
        dir_name = 'dir_' + str(i)
        dir_path = os.path.join(os.getcwd(), dir_name)  # полный адрес запускаемого скрипта + название новой директории
        try:
            os.mkdir(dir_path)  # пробуем создать папку
            print(f'Создана директрория {dir_name}')
        except FileExistsError: # если папка уже есть и возникает ошибка FileExistsError, продолжаем выполнять скрипт
            print(f'Директрория {dir_name} уже существует')

def del_dirs():
    for i in range(1, 10):
        dir_name = 'dir_' + str(i)
        dir_path = os.path.join(os.getcwd(), dir_name)  # полный адрес запускаемого скрипта + название новой директории
        if os.path.isdir(dir_path):
            os.removedirs(dir_path)
            print(f'Директрория {dir_name} и всё содержимое удалены.')
        else:
            print(f'Директрория {dir_name} не существует.')

# Проверка:
make_dirs()  # вызываем функцию создания 9 папок
del_dirs()  # вызываем функцию удаления созданных папок
print()

# Задача-2:
# Напишите скрипт, отображающий папки текущей директории.
# Задача-2:
# Напишите скрипт, отображающий папки текущей директории.

#dir_path = os.getcwd()  # т.к. работаем с папкой, где находится запускной файл, не буду работать с полным адресом
dir_list = os.listdir()
#print(dir_path)
#print(dir_list)
for element in dir_list[:]:  # Вопрос: стоит ли указывать у списка "[:]" для использования в качестве копии списка?
    if os.path.isfile(element):  # Если текущий элемент из общего списка файлов и папок является файлом
        dir_list.remove(element)  # Удаляем из списка
print(f'список папок в директории исполняемого скрипта: {dir_list}')
print()

# Задача-3:
# Напишите скрипт, создающий копию файла, из которого запущен данный скрипт.


def duplicate_this_py():
# Функция создания дубликата из текущего файла.
# Имеется проверка успешного создания файла.
    rewrite_file = ' '  # создание пустого флага на перезапись существующего дубликата
    this_file = (os.path.basename(os.path.realpath(__file__)))  # получаем полный путь к текущему файлу и отсекаем путь

    new_file = this_file + '.dupl'  # имя дубликата
    if os.path.exists(new_file):  # проверка, если файл уже есть. Выпендрёш. В ДЗ можно было обойтись и без этого
        print(f'Дубликат {new_file} исполняемого файла {this_file} уже был создан')
        while rewrite_file != 'y' and rewrite_file != 'n':  # цикл с вопросом о перезаписи
            rewrite_file = input('Перезаписать дубликат [y/n]: ')
            if rewrite_file == 'n':
                 print('Отмена перезаписи дубликата исполняемого файла')
                 return
            elif rewrite_file == 'y':
                shutil.copy(this_file, new_file)
            else:
                print("Некорректный ввод!")
    else:  # если дубликата еще не было, создаем копию
        shutil.copy(this_file, new_file)
    # ниже повторная проверка на создание уже свежего файла. Если он так и не появился, сообщаем об ошибке.
    print(f"Успешно создан дубликат: {new_file}.") if os.path.exists(new_file) else print(f"Возникли проблемы"
                                                                                     f"при создании файла {new_file}.")


duplicate_this_py()  # Проверка функции

# if __name__ == 'main':
# 	pass

